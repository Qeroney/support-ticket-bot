package io.github.qeroney.handler

import io.github.dehuckakpyt.telegrambot.annotation.HandlerComponent
import io.github.dehuckakpyt.telegrambot.container.GeneralContainer
import io.github.dehuckakpyt.telegrambot.container.message.MessageType.DOCUMENT
import io.github.dehuckakpyt.telegrambot.container.message.MessageType.PHOTO
import io.github.dehuckakpyt.telegrambot.container.message.MessageType.TEXT
import io.github.dehuckakpyt.telegrambot.ext.container.fromId
import io.github.dehuckakpyt.telegrambot.factory.keyboard.inlineKeyboard
import io.github.dehuckakpyt.telegrambot.handler.BotHandler
import io.github.qeroney.config.properties.MessageTemplate
import io.github.qeroney.model.Attachment
import io.github.qeroney.model.FileType
import io.github.qeroney.service.ticket.TicketService
import io.github.qeroney.service.ticket.argument.CreateTicketArgument
import io.github.qeroney.service.user.TelegramUserService

@HandlerComponent
class TicketHandler(
    private val ticketService: TicketService,
    private val telegramUserService: TelegramUserService,
    private val template: MessageTemplate) : BotHandler({

    fun GeneralContainer.continueTransferringPlus(vararg pairs: Pair<String, Any>): MutableMap<String, Any> {
        val map = transferredOrNull<MutableMap<String, Any>>() ?: mutableMapOf()
        pairs.forEach { (k, v) -> map[k] = v }
        transfer(map)
        return map
    }

    callback("create_ticket", next = "ask_description") {
        transfer(mutableMapOf("files" to mutableListOf<Attachment>()))
        sendMessage(template.getTicketAskDescription)
    }

    step("ask_description", type = TEXT, next = "ask_attachments") {
        val desc = text.trim()

        val draft = continueTransferringPlus("description" to desc)

        sendMessage(template.getTicketDescriptionAccepted with mapOf("desc" to desc),
            replyMarkup = inlineKeyboard(
                callbackButton("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã", "attach_files", draft),
                callbackButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip_attachments", draft)))
    }

    callback("attach_files", next = "receiving_files") {
        transfer(transferred())
        sendMessage(template.getTicketAttachFilesPrompt)
    }

    callback("skip_attachments", next = "confirm_ticket") {
        val map = transferred<MutableMap<String, Any>>()
        val files = map["files"] as MutableList<Attachment>
        val user = telegramUserService.getByChatId(fromId)
        val description = map["description"] as? String ?: "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        transfer(map)

        val confirmationText = buildString {
            append("üìã *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏*\n\n")
            append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞—è–≤–∫–∏:\n\n")
            append("üë§ *–§–ò–û:* ${user.fullName ?: "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n")
            append("üìß *–ü–æ—á—Ç–∞:* ${user.email ?: "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n")
            append("üì± *–ö–æ–Ω—Ç–∞–∫—Ç:* ${user.phone ?: "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n")
            append("üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* $description\n")
            append("üìé *–í–ª–æ–∂–µ–Ω–∏—è:* ${files.size} —Ñ–∞–π–ª–∞(–æ–≤)\n\n")
            append("–í—Å—ë –≤–µ—Ä–Ω–æ?")
        }

        sendMessage(confirmationText,
            replyMarkup = inlineKeyboard(
                callbackButton(template.getSendTicket, "submit_ticket", map),
                callbackButton(template.getCancelTicket, "cancel_ticket", map)))
    }

    step("receiving_files", type = DOCUMENT, next = "receiving_files") {
        val doc = document
        val map = transferred<MutableMap<String, Any>>()
        val files = map["files"] as MutableList<Attachment>

        if (files.size >= 5) {
            sendMessage(template.getTicketMaxFilesError)
            return@step
        }

        files.add(Attachment(
            fileId = doc.fileId,
            fileName = doc.fileName ?: "document",
            type = FileType.DOCUMENT,
            fileSize = doc.fileSize))

        map["files"] = files
        transfer(map)

        sendMessage(template.getTicketFileSaved with mapOf("fileName" to doc.fileName, "size" to files.size),
            replyMarkup = inlineKeyboard(callbackButton(template.getDoneTicket, "done_attachments", map)))
    }

    step("receiving_files", type = PHOTO, next = "receiving_files") {
        val photo = photos.maxByOrNull { it.fileSize ?: 0 } ?: photos.last()
        val map = transferred<MutableMap<String, Any>>()
        val files = map["files"] as MutableList<Attachment>

        if (files.size >= 5) {
            sendMessage(template.getTicketMaxFilesError)
            return@step
        }

        files.add(Attachment(
            fileId = photo.fileId,
            fileName = "photo_${System.currentTimeMillis()}.jpg",
            type = FileType.PHOTO,
            fileSize = photo.fileSize?.toLong()))

        map["files"] = files
        transfer(map)

        sendMessage(template.getTicketPhotoSaved with mapOf("size" to files.size),
            replyMarkup = inlineKeyboard(callbackButton(template.getDoneTicket, "done_attachments", map)))
    }

    step("receiving_files", type = TEXT, next = "receiving_files") {
        sendMessage(template.getTicketNoTextAllowed)
    }

    callback("done_attachments", next = "confirm_ticket") {
        val map = transferred<MutableMap<String, Any>>()
        val files = map["files"] as MutableList<Attachment>
        val user = telegramUserService.getByChatId(fromId)
        val description = map["description"] as? String ?: "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        transfer(map)

        val confirmationText = buildString {
            append("üìã *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏*\n\n")
            append("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –∑–∞—è–≤–∫–∏:\n\n")
            append("üë§ *–§–ò–û:* ${user.fullName ?: "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n")
            append("üìß *–ü–æ—á—Ç–∞:* ${user.email ?: "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n")
            append("üì± *–ö–æ–Ω—Ç–∞–∫—Ç:* ${user.phone ?: "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n")
            append("üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* $description\n")
            append("üìé *–í–ª–æ–∂–µ–Ω–∏—è:* ${files.size} —Ñ–∞–π–ª–∞(–æ–≤)\n\n")
            append("–í—Å—ë –≤–µ—Ä–Ω–æ?")
        }

        sendMessage(confirmationText,
            replyMarkup = inlineKeyboard(
                callbackButton(template.getSendTicket, "submit_ticket", map),
                callbackButton(template.getCancelTicket, "cancel_ticket", map)))
    }

    callback("submit_ticket") {
        val map = transferred<MutableMap<String, Any>>()
        val user = telegramUserService.getByChatId(fromId)
        transfer(map)

        sendMessage(template.getFinalSendTicket)

        val description = map["description"] as? String
        val files = map["files"] as MutableList<Attachment>

        val arg = CreateTicketArgument(
            description = description,
            files = files,
            attachmentCount = files.size,
            owner = user)

        val ticket = ticketService.create(arg)

        sendMessage(
            "üéâ *–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!*\n\n" +
                    "üìã *–ù–æ–º–µ—Ä –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏:* #${ticket.id}\n" +
                    "üìù *–û–ø–∏—Å–∞–Ω–∏–µ:* ${ticket.description}\n" +
                    "üìé *–í–ª–æ–∂–µ–Ω–∏–π:* ${files.size}\n\n" +
                    "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            parseMode = "Markdown",
            replyMarkup = inlineKeyboard(
                callbackButton(template.getAnotherOneTicket, "create_ticket"),
                callbackButton(template.getMyTicketsButton, "my_tickets")))
    }

    callback("cancel_ticket") {
        sendMessage(template.getCancelTicketAndMainMenu,
                    replyMarkup = inlineKeyboard(callbackButton(template.getMainMenu, "main_menu"),
                                                 callbackButton(template.getNewTicket, "create_ticket")))
    }

    callback("my_tickets") {
        val user = telegramUserService.getByChatId(fromId)
        val tickets = ticketService.getTicketsByOwnerChatId(user.chatId)

        if (tickets.isEmpty()) {
            sendMessage(
                "üìã *–ú–æ–∏ –∑–∞—è–≤–∫–∏*\n\n" +
                        "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç –∑–∞—è–≤–æ–∫.",
                parseMode = "Markdown",
                replyMarkup = inlineKeyboard(callbackButton(template.getAnotherNewTicket, "create_ticket")))
        } else {
            val text = buildString {
                append("üìã *–í–∞—à–∏ –∑–∞—è–≤–∫–∏:*\n\n")
                tickets.forEachIndexed { index, ticket ->
                    append("${index + 1}. *#${ticket.id}* ‚Äî ${ticket.description ?: "–±–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"}\n")
                    ticket.attachmentCount?.let {
                        if (it > 0) {
                            append("üìé –í–ª–æ–∂–µ–Ω–∏–π: ${ticket.attachmentCount}\n")
                        }
                    }
                    append("\n")
                }
            }
            sendMessage(text, parseMode = "Markdown", replyMarkup = inlineKeyboard(callbackButton(template.getAnotherNewTicket, "create_ticket")))
            }
        }

        callback("main_menu") {
            sendMessage(template.getMainMenuPrompt,
                replyMarkup = inlineKeyboard(
                    callbackButton(template.getAnotherNewTicket, "create_ticket"),
                    callbackButton(template.getMyTicketsButton, "my_tickets")))
        }
    })