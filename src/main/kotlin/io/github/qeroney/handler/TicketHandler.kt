package io.github.qeroney.handler

import io.github.dehuckakpyt.telegrambot.annotation.HandlerComponent
import io.github.dehuckakpyt.telegrambot.container.GeneralContainer
import io.github.dehuckakpyt.telegrambot.container.message.MessageType.DOCUMENT
import io.github.dehuckakpyt.telegrambot.container.message.MessageType.PHOTO
import io.github.dehuckakpyt.telegrambot.container.message.MessageType.TEXT
import io.github.dehuckakpyt.telegrambot.ext.container.fromId
import io.github.dehuckakpyt.telegrambot.factory.keyboard.inlineKeyboard
import io.github.dehuckakpyt.telegrambot.factory.keyboard.removeKeyboard
import io.github.dehuckakpyt.telegrambot.handler.BotHandler
import io.github.qeroney.config.properties.MessageTemplate
import io.github.qeroney.model.Attachment
import io.github.qeroney.model.FileType
import io.github.qeroney.service.ticket.TicketService
import io.github.qeroney.service.ticket.argument.CreateTicketArgument
import io.github.qeroney.service.user.TelegramUserService
// todo(–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤–µ—Å—å —Ç–µ–∫—Å—Ç –≤ template)
@HandlerComponent
class TicketHandler(
    private val ticketService: TicketService,
    private val telegramUserService: TelegramUserService,
    private val template: MessageTemplate) : BotHandler({

    fun GeneralContainer.continueTransferringPlus(vararg pairs: Pair<String, Any>): MutableMap<String, Any> {
        val map = transferredOrNull<MutableMap<String, Any>>() ?: mutableMapOf()
        pairs.forEach { (k, v) -> map[k] = v }
        transfer(map)
        return map
    }

    callback("create_ticket", next = "ask_description") {
        transfer(mutableMapOf("files" to mutableListOf<Attachment>()))
        sendMessage(
            "üé´ *–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏*\n\n" +
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ, –≤ —á–µ–º –ø—Ä–æ–±–ª–µ–º–∞? (1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
            parseMode = "Markdown",
            replyMarkup = removeKeyboard())
    }

    step("ask_description", type = TEXT) {
        val desc = text.trim()

        continueTransferringPlus("description" to desc)

        sendMessage(
            "‚úÖ *–ü—Ä–∏–Ω—è–ª –æ–ø–∏—Å–∞–Ω–∏–µ:* $desc\n\n" +
                    "–•–æ—Ç–∏—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è? –ú–æ–∂–Ω–æ –¥–æ 5 —à—Ç—É–∫.",
            parseMode = "Markdown",
            replyMarkup = inlineKeyboard(
                callbackButton("üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã", "attach_files"),
                callbackButton("‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å",       "skip_attachments")))
    }

    callback("attach_files", next = "receiving_files") {
        val map = transferred<MutableMap<String, Any>>()
        transfer(map)

        sendMessage("üìé *–ü—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤*\n\n" +
                    "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç—ã. –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ ‚Äî —É–≤–∏–¥–∏—Ç–µ —Å—á—ë—Ç—á–∏–∫ –∏ –∫–Ω–æ–ø–∫—É ¬´–ì–æ—Ç–æ–≤–æ¬ª.\n" +
                    "–ú–∞–∫—Å–∏–º—É–º 5.",
            parseMode = "Markdown",
            replyMarkup = removeKeyboard())
    }

    callback("skip_attachments", next = "confirm_ticket") {
        val map         = transferred<MutableMap<String, Any>>()
        val files       = map["files"] as List<Attachment>
        val user        = telegramUserService.getByChatId(fromId)
        val description = map["description"] as String

        transfer(map)

        val summary = buildString {
            append("üìã *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏*\n\n")
            append("üë§ –§–ò–û: ${user.fullName ?: "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n")
            append("‚úâÔ∏è –ü–æ—á—Ç–∞: ${user.email     ?: "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}\n")
            append("üì± –ö–æ–Ω—Ç–∞–∫—Ç: ${user.phone    ?: "–ù–µ —É–∫–∞–∑–∞–Ω"}\n")
            append("üìù –û–ø–∏—Å–∞–Ω–∏–µ: $description\n")
            append("üìé –í–ª–æ–∂–µ–Ω–∏—è: ${files.size} —à—Ç.\n\n")
            append("–í—Å—ë –≤–µ—Ä–Ω–æ?")
        }

        sendMessage(summary,
            parseMode = "Markdown",
            replyMarkup = inlineKeyboard(callbackButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "submit_ticket"),
                                         callbackButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_ticket")))
    }

    step("receiving_files", type = DOCUMENT) {
        val map   = transferred<MutableMap<String, Any>>()
        transfer(map)
        val files = map["files"] as MutableList<Attachment>

        if (files.size >= 5) {
            sendMessage("‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤! –ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
            return@step
        }

        files.add(Attachment(
                fileId   = document.fileId,
                fileName = document.fileName ?: "document",
                type     = FileType.DOCUMENT,
                fileSize = document.fileSize))
        transfer(map)

        val names = files.joinToString(", ") { it.fileName.toString() }
        sendMessage(
            "‚úÖ –í–ª–æ–∂–µ–Ω–∏—è: $names\n" +
                    "üìä –ü–æ–ª—É—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.size}\n" +
                    "–û—Ç–ø—Ä–∞–≤—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª",
            parseMode = "Markdown",
            replyMarkup = inlineKeyboard(callbackButton("‚úÖ –ì–æ—Ç–æ–≤–æ", "done_attachments")))
    }

    step("receiving_files", type = PHOTO) {
        val best  = photos.maxByOrNull { it.fileSize ?: 0 }!!
        val map   = transferred<MutableMap<String, Any>>()
        val files = map["files"] as MutableList<Attachment>

        if (files.size >= 5) {
            sendMessage("‚ö†Ô∏è –ú–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–π–ª–æ–≤! –ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
            return@step
        }

        files.add( Attachment(
            fileId   = best.fileId,
            fileName = "photo_${System.currentTimeMillis()}.jpg",
            type     = FileType.PHOTO,
            fileSize = best.fileSize?.toLong()))
        transfer(map)

        val names = files.joinToString(", ") { it.fileName.toString() }
        sendMessage("‚úÖ –í–ª–æ–∂–µ–Ω–∏—è: $names\n" +
                            "üìä –ü–æ–ª—É—á–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: ${files.size}\n" +
                            "–û—Ç–ø—Ä–∞–≤—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ¬ª",
                    parseMode = "Markdown",
                    replyMarkup = inlineKeyboard(callbackButton("‚úÖ –ì–æ—Ç–æ–≤–æ", "done_attachments")))
    }

    callback("done_attachments", next = "confirm_ticket") {
        val map         = transferred<MutableMap<String, Any>>()
        val files       = map["files"] as List<Attachment>
        val user        = telegramUserService.getByChatId(fromId)
        val description = map["description"] as String

        val summary = buildString {
            append("üìã *–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏*\n\n")
            append("üë§ –§–ò–û: ${user.fullName ?: "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n")
            append("‚úâÔ∏è –ü–æ—á—Ç–∞: ${user.email     ?: "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}\n")
            append("üì± –ö–æ–Ω—Ç–∞–∫—Ç: ${user.phone    ?: "–ù–µ —É–∫–∞–∑–∞–Ω"}\n")
            append("üìù –û–ø–∏—Å–∞–Ω–∏–µ: $description\n")
            append("üìé –í–ª–æ–∂–µ–Ω–∏—è: ${files.size} —à—Ç.\n\n")
            append("–í—Å—ë –≤–µ—Ä–Ω–æ?")
        }

        sendMessage(summary,
                    parseMode = "Markdown",
                    replyMarkup = inlineKeyboard(callbackButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É", "submit_ticket"),
                                                 callbackButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",         "cancel_ticket")))
    }

    callback("submit_ticket") {
        val map   = transferred<MutableMap<String, Any>>()
        val user  = telegramUserService.getByChatId(fromId)
        val desc  = map["description"] as String
        val files = map["files"]       as List<Attachment>

        val ticket = ticketService.upsert(CreateTicketArgument(
            description     = desc,
            files           = files,
            attachmentCount = files.size,
            owner           = user))
        sendMessage("‚úÖ –ó–∞—è–≤–∫–∞ #${ticket.id} —Å–æ–∑–¥–∞–Ω–∞!", replyMarkup = removeKeyboard())
    }

    callback("cancel_ticket") {
        transfer(mutableMapOf<String, Any>())
        sendMessage("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", replyMarkup = removeKeyboard())
    }
})